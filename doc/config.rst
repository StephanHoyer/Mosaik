Configuration of an app
-----------------------

Hello World
~~~~~~~~~~~

The main part of an app is its configuration. Here you define the layout blocks, the middleware an the routes it
listens to. The directory-structure of a simple 'Hello world'-App might look like this:

::
    apps/
      hello-world/
        config.coffee
    node-modules/
      ...
    app.coffee

The config.coffee itself may look like the following:

::
    module.exports.config = 
        childs:
            'helloWorld':
                route: /.*/
                method: () -> 'Hello World'

* Line 1: This is the Common JS pattern for exposing internals of a module to the open, every mosaik module has to expose
at least this configuration.
* Line 2: 'childs' is always the node name for defining children block of the block containing the node. Since we are in
  the ROOT, child is the point where to define the different websites or routes or blocks which in this case is nearly
  the same.
* Line 3: This is the name of the block/route/website. Since it has to be unique over all the blocks on every site it
  should be more specific in large sites.
* Line 4: This is the route on which the server should serve this block. It can be a single string, a regular
  expression or an array with multiple of both. For more information refer to the routes section of the documentation
* Line 5: This is the block function which is fired to render the block. In this simple case, only a string containing
  the magic words is returned.

As the result of this configuration, every request you post to you application should result in showing "Hello World".

Middleware basics
~~~~~~~~~~~~~~~~~

Displaying static content like in the previous example is not a thing where you would use a webframework, right? So
often you have to process any data befor rendering them with a template. Here is where the middleware comes in to play.
The middleware is a either userdefined, build-in or 3rd party functions with a specific signature. The following example
is a middleware, which does nothing:

::
    nothing = (req, res, done, next) -> done()

The parameters are the following
* req: The request object which contains request related data and can be used to store data generated by the middleware.
* res: The response object which contains the response related data. It can be used to store middleware-generated data
  related to the response
* done: this is a function you have to call, when the middleware has done its job and the next middleware or the
  rendering can continue. Note that calling the done-method does not end the processing of the function. Any commands
  that follow the done-call are processed as normal
* next: method to tell the router not to continue with this route but to search for next matching route that matches the
  request string

For more details about middleware refer to the middleware section.

Attaching a middleware to a route
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Now we have a middleware, but how to attach it to a request. As you might guess, the configuration is responsible for
that. We have to extend the upper configuration as follows:

::
    nothing = (req, res, done, next) -> done()
    
    module.exports.config = 
        childs:
            'helloWorld':
                route: /.*/
                method: () -> 'Hello World'
                middlewares:
                    'nothingMiddleware'
                        method: nothing

As you can see, we define the middleware in line 1. Then we add a node 'middlewares to the block 'helloWorld'. Then we
add a subnode with the name of the middleware, in this case 'nothingMiddleware'. Note that also the name has to be
unique over the whole application, no other middleware should have the same name. This node contains a subnode 'method'
which contains the method we defined above. Since this all is Coffee/Javascript we also can define the method inline:
    
::
    module.exports.config = 
        childs:
            'helloWorld':
                route: /.*/
                method: () -> 'Hello World'
                middlewares:
                    'nothingMiddleware'
                        method: (req, res, done, next) -> done()

If you have small middleware, which only contains one line, this can be quite handy. More nice features when attaching
middleware can be found at the middleware section.

Child blocks
~~~~~~~~~~~~


