=========================
Mosaik - Node Webframework
=========================

NOTICE
======

This is a work in progress and **may change** without any notices.


About
=====

Mosaik is rapid application web framework with node js. It is based on the connect framework. It follows the Model-Action-View principle which is similar to the MVC pattern. The concept is inspired by the great layout processor of the Open source ecommerce solution Magento.

The Framework is based on the idea, that the separation between controller and view isn't as strict as it should be. In most other webframeworks - like Ruby or Django - the controller prepares data for the view by e. G. fetching them from the database (of cause with the help of models). Other parts of the site (like a top menu) which also fetches data of a database does this without any controller. The approach of Mosaik is a little different: there are four main entities:

- Model: plays the same role as in other webframeworks
- Template: same as model
- Block: prepares data for rendering
- Action: contains the "business logic", parses and processes POST data, interacts with models, handles session and so on

Because every request needs other actions, not only the template (and the controller as in other frameworks) is route-specific but also the actions. An action is just a simple function with several parameters like request and response.

Every block that generates output has to contain at least one action which takes the information generated by several actions and generates output.
A second main feature of Mosaik is the layout- or blocktree. Every website contains several blocks such as the header, containing the menu and the loginstate, the main content (e. G. a blogpost) and a footer (containing a search field and a sitemap). Some of these blocks share information, some need data from the db and some other are static an don't need anything more than a template. So every block can depend on a number of middlwares to run before it has all required information to render its content.

Mosik also trys to match with the following princibles:

Reusable Apps
-------------

Every functionality of the project (except of the templates and some configuration) your going to create is contained in a Mosaik-App. Once created, these applications can be used and improved in several projects. They also can be installed and provided to others via NPM, the node package manager. In the near future there will hopefully be a lot of great Mosaik applications to improove your project.

Loose coupling
--------------

The action concept allows Mosaik to be as loosly coupled as you might imagine. It takes two objects, manipulates them,
in most cases thats all. In most cases middlware should consist of only a few lines of code. And they are damn easy to
test. Which brings us to the next point:

Test driven develpoment
-----------------------

The development of Mosaik is completly testdriven, so your applications should also be. Refer to the example
applications to find out, how to test your code.

Don't repeat youself (DRY) and also not others (DRY'n'ANO)
----------------------------------------------------------

Writing the same code over and over again is boring and errorprone. Also time is money, especially for us developers. Mosaik tries to solve this in a number of ways. One example is the concept of multiple requestrelated actions, another one the reusable apps feature.
