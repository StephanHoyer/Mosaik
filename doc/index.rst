=========================
Mosik - Node Webframework
=========================

About
=====

Mosaik is rapid application web framework with node js. It is based on the connect framework. It follows the Modul-Middleware-View principle which is similar to the MVC pattern. The concept is inspired by the great layout processor of the Open source ecommerce solution Magento.
The Framework is based on the idea, that the separation between controller and view isn't as strict as it should be. In most other webframeworks like Ruby or Django the controller prepares data for the view by fetching them from the database (of cause with the help of models). The approach of Mosaik is a little different: there are 4 main entities:
- model: Plays the same role as in other webframeworks
- template: same as model
- Block: prepares data for rendering
- Middleware: Contains the "business logic", parses and processes POST data, interacts with models, handles session and so forth. 
Because every request needs other middleware, not only the template (and the controller as in other frameworks) is request-specific but also the middleware. One middleware is just a simple function with several parameters like request and response.
The block is the "final" middleware which takes the information generated by several middlewares.
A second main feature of Mosaik is the layout- or blocktree. Every website contains several blocks such as the header, containing the menu and the loginstate, the main content (e. G. a blogpost) and a footer (containing a search field and a sitemap).  

Mosik also trys to match with the following princibles:

Reusable Apps
-------------

Every functionality of the project (except of the templates and some configuration) your going to create is contained in a Mosaik-App. Once created, these applications can be used and improved in several projects. They also can be installed and provided to others via NPM, the node package manager. In the near future there will hopefully be a lot of great Mosaik applications to improove your project.

Loose coupling
--------------

The middleware concept allows Mosaik to be as loosed coupled as you might think. It takes to objects, manipulates them,
in most cases thats all. In most cases middlware should consist of only a few lines of code. And they are damn easy to
test. Which brings us to the next point:

Test driven develpoment
-----------------------

The development of Mosaik is completly testdriven, so your applications should also be. Refer to the example
applications to find out, how to test your code.

Don't repeat youself (DRY) and also not others (DRY'n'ANO)
----------------------------------------------------------

Writing the same code over and over again is boring and errorprone (@TODO fehleranf√§llig). Also time is money, especially for us developers. Mosaik tries to solve this in a number of ways. One example is the concept of requestrelated middleware, another one the reusable apps feature.





